import json
import logging
import sqlite3
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("user_data.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_results (
    user_id TEXT PRIMARY KEY,
    results TEXT,
    recommendations TEXT
)
""")
conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_questions(file_path: str):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            questions = json.load(file)["competencies"]
        return questions
    except FileNotFoundError:
        logger.error(f"File {file_path} not found.")
        raise
    except json.JSONDecodeError:
        logger.error(f"Invalid JSON format in file {file_path}.")
        raise

QUESTIONS = load_questions("questions.json")
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∫–∞–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def create_progress_bar(current_index: int, total_questions: int) -> str:
    progress = int((current_index / total_questions) * 5)  # 5 –±–ª–æ–∫–æ–≤ –¥–ª—è —à–∫–∞–ª—ã
    completed_blocks = "üü©" * progress
    remaining_blocks = "‚¨úÔ∏è" * (5 - progress)
    percentage = int((current_index / total_questions) * 100)
    return f"{completed_blocks}{remaining_blocks} ({percentage}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id if update.effective_chat else "N/A"
    logger.info(f"User {user_id} started the bot in chat {chat_id}.")

    if user_id not in user_data:
        user_data[user_id] = {"current_question_index": 0, "scores": {}}

    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="start_assessment")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π?", reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∫–∏
async def start_assessment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    logger.info(f"Assessment started for user {user_id}.")

    if user_id not in user_data:
        user_data[user_id] = {"current_question_index": 0, "scores": {}}

    await ask_question(update, context, user_id)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str) -> None:
    current_index = user_data[user_id]["current_question_index"]
    total_questions = len(QUESTIONS[0]["questions"])
    if current_index >= total_questions:
        await show_results(update, context, user_id)
        return

    question = QUESTIONS[0]["questions"][current_index]

    # –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton(option["text"], callback_data=f"answer_{i}")]
        for i, option in enumerate(question["options"])
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = [
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish"),
    ]
    keyboard.append(navigation_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)

    progress_bar = create_progress_bar(current_index + 1, total_questions)
    message = (
        f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: {QUESTIONS[0]['name']}\n"
        f"–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {total_questions} üîç\n"
        f"{progress_bar}\n\n"
        f"{question['question']}"
    )
    await update.callback_query.edit_message_text(message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    answer_index = int(query.data.split("_")[1])
    current_index = user_data[user_id]["current_question_index"]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    competency = QUESTIONS[0]["name"]
    if competency not in user_data[user_id]["scores"]:
        user_data[user_id]["scores"][competency] = []
    user_data[user_id]["scores"][competency].append(answer_index + 1)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_data[user_id]["current_question_index"] += 1
    if user_data[user_id]["current_question_index"] < len(QUESTIONS[0]["questions"]):
        await ask_question(update, context, user_id)
    else:
        await show_results(update, context, user_id)

# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str) -> None:
    scores = user_data[user_id]["scores"]
    teamwork_score = sum(scores["teamwork"]) / len(scores["teamwork"])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
    INSERT OR REPLACE INTO user_results (user_id, results, recommendations)
    VALUES (?, ?, ?)
    """, (user_id, json.dumps(scores), "TODO: Recommendations"))
    conn.commit()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message = (
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {teamwork_score:.2f}/5\n\n"
        f"–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {teamwork_score:.2f}/5\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ –∫—É—Ä—Å '–û—Å–Ω–æ–≤—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã' (LO-AL3-001).\n"
        f"‚Ä¢ –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ' (LO-EL4-001)."
    )
    await update.callback_query.edit_message_text(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token("7889453188:AAEmb2hKOv6dWxGrb7aWy59I2DSkMXwGhLY").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_assessment, pattern="^start_assessment$"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))
    application.add_handler(CallbackQueryHandler(ask_question, pattern="^back$"))

    application.run_polling()

if __name__ == "__main__":
    main()
